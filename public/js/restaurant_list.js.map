{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/restaurant_list.js","src/js/utils/dbhelper.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","navigator","serviceWorker","register","scope","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","neighborhoods","console","self","fillNeighborhoodsHTML","arguments","undefined","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","cuisines","fillCuisinesHTML","cuisine","window","initMap","map","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","restaurants","resetRestaurants","fillRestaurantsHTML","markers","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","alt","name","cuisine_type","classList","add","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push","callback","fetch","DATABASE_URL","then","resp","json","catch","log","id","fetchRestaurants","find","results","filter","v","uniqueNeighborhoods","indexOf","uniqueCuisines","photograph","Marker","position","latlng","title","animation","Animation","DROP"],"mappings":"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","file":"restaurant_list.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","require('./utils/dbhelper');\r\n\r\nlet restaurants, neighborhoods, cuisines, map, markers = [];\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', { scope: './' });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${restaurant.cuisine_type}`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(resp => resp.json())\r\n      .then(restaurants => callback(null, restaurants))\r\n      .catch(e => console.log(`Request failed. Returned error: ${e}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`img/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;"],"sourceRoot":"/source/"}