{"version":3,"sources":["signature.js","restaurant_list.js","dbhelper.js","idb.js","lozad.js"],"names":["APP_NAME","MAP_API_KEY","console","log","map","restaurants","neighborhoods","cuisines","markers","navigator","serviceWorker","register","scope","ready","then","swRegistration","sync","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","updateRestaurants","addGoogleMap","script","createElement","type","src","body","appendChild","DBHelper","error","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","addMarkersToMap","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","lazyLoadImages","lozad","observe","length","m","setMap","fragment","createDocumentFragment","ul","restaurant","createRestaurantHTML","li","setAttribute","id","image","className","imageUrlForRestaurant","alt","name","cuisine_type","classList","add","address","more","href","urlForRestaurant","favToggle","title","stringToBoolean","is_favorite","favoriteRestaurant","target","marker","mapMarkerForRestaurant","addListener","location","url","push","indexOf","remove","REST_URL","DB_NAME","STORE_RESTAURANTS","STORE_REVIEWS","DB_VER","[object Object]","idb","open","upgrade","createObjectStore","keyPath","callback","getDb","db","transaction","objectStore","getAll","data","fetch","resp","status","json","response","store","pendingUpdate","put","catch","err","reviews","review","fetchReviews","reviewsList","filter","restaurant_id","fetchRestaurants","find","results","v","i","uniqueNeighborhoods","uniqueCuisines","photograph","Marker","position","latlng","animation","Animation","DROP","state","method","info","e","str","toLowerCase","trim","Boolean","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","t","define","amd","assign","r","n","hasOwnProperty","documentMode","rootMargin","threshold","load","nodeName","getAttribute","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","IntersectionObserver","a","intersectionRatio","unobserve","Element","NodeList","querySelectorAll","triggerLoad"],"mappings":"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","file":"restaurant_list.js","sourcesContent":["const APP_NAME = 'av-rr';\r\n\r\nconst MAP_API_KEY = 'AIzaSyB1eWmbJ77N0GZFASeLjh0oMWGAi0BKnHc';\r\n\r\n// my signature\r\nconsole.log(\r\n    `%c ${APP_NAME} %c restaurant reviews `,\r\n    'background: #2196F3; color: #fff; font-size: 12px; border-radius: 3px 0 0 3px; font-family: Tahoma;',\r\n    'background: #bee1fd; color: #000; font-size: 12px; border-radius: 0 3px 3px 0; font-family: Tahoma;'\r\n);\r\n","let restaurants = [],\r\n  neighborhoods = [],\r\n  cuisines = [],\r\n  map,\r\n  markers = [];\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', {\r\n    scope: './'\r\n  });\r\n\r\n  navigator.serviceWorker.ready.then(swRegistration => {\r\n    return swRegistration.sync.register('syncUp');\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Async add google map\r\n */\r\naddGoogleMap = () => {\r\n  let script = document.createElement('script');\r\n\r\n  script.type = 'text/javascript';\r\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${MAP_API_KEY}&callback=initMap`;\r\n  document.body.appendChild(script);\r\n};\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML\r\n * @param {Array} neighborhoods\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML\r\n * @param {Array} cuisines\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n\r\n  if (typeof google !== 'undefined') addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) console.error(error);\r\n    else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n      lazyLoadImages();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Load page images after restaurant DOM has been added\r\n */\r\nlazyLoadImages = () => {\r\n  const observer = lozad();\r\n  observer.observe();\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers\r\n * @param {Array} restaurants - list of restaurants\r\n */\r\nresetRestaurants = restaurants => {\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers && self.markers.length > 0) {\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n  }\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage\r\n * @param {Array} restaurants - list of restaurants\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const fragment = document.createDocumentFragment();\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    fragment.append(createRestaurantHTML(restaurant));\r\n  });\r\n\r\n  ul.appendChild(fragment);\r\n};\r\n\r\n/**\r\n * Create restaurant HTML\r\n * @param {Object} restaurant - restaurant\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n  li.setAttribute('restaurant-id', restaurant.id);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img lozad';\r\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant));\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${restaurant.cuisine_type}`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n\r\n  const favToggle = document.createElement('span');\r\n  favToggle.innerHTML = `&#x2605;`;\r\n  favToggle.title = 'Favorite restaurant';\r\n  favToggle.classList.add('favorite-restaurant');\r\n  if (stringToBoolean(restaurant.is_favorite)) favToggle.classList.add('is-favorite');\r\n  favToggle.addEventListener('click', event => {\r\n    favoriteRestaurant(event.target, restaurant);\r\n  });\r\n\r\n  li.append(favToggle);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map\r\n * @param {Array} restaurants - list of restaurants\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    if (self.markers) self.markers.push(marker);\r\n  });\r\n};\r\n\r\n/**\r\n * Favorite/unfavorite restaurant\r\n * @param {Object} target - event target\r\n * @param {Object} restaurant\r\n */\r\nfavoriteRestaurant = (target, restaurant) => {\r\n  if (target.className.indexOf('is-favorite') > -1) {\r\n    target.classList.remove('is-favorite');\r\n    DBHelper.favoriteRestaurant(restaurant, false);\r\n  } else {\r\n    target.classList.add('is-favorite');\r\n    DBHelper.favoriteRestaurant(restaurant, true);\r\n  }\r\n};\r\n","/**\r\n * Common database helper functions\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * REST API location\r\n   */\r\n  static get REST_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * database name (= service worker name)\r\n   */\r\n  static get DB_NAME() {\r\n    return APP_NAME;\r\n  }\r\n\r\n  /**\r\n   * Indexed db store name for restaurants\r\n   */\r\n  static get STORE_RESTAURANTS() {\r\n    return 'restaurants';\r\n  }\r\n\r\n  /**\r\n   * Indexed db store name for reviews\r\n   */\r\n  static get STORE_REVIEWS() {\r\n    return 'reviews';\r\n  }\r\n\r\n  /**\r\n   * Indexed db version\r\n   */\r\n  static get DB_VER() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Get indexed database promise\r\n   */\r\n  static getDb() {\r\n    return idb.open(DBHelper.DB_NAME, DBHelper.DB_VER, upgrade => {\r\n      const storeRestaurants = upgrade.createObjectStore(DBHelper.STORE_RESTAURANTS, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      //storeRestaurants.createIndex('by-id', 'id');\r\n\r\n      const storeReviews = upgrade.createObjectStore(DBHelper.STORE_REVIEWS, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      //storeReviews.createIndex('by-restaurant-id', 'restaurant_id');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   * @param {Function} callback function to be triggered after restaurants are returned\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.getDb()\r\n      .then(db => {\r\n        if (!db) return;\r\n\r\n        return db\r\n          .transaction(DBHelper.STORE_RESTAURANTS)\r\n          .objectStore(DBHelper.STORE_RESTAURANTS)\r\n          .getAll();\r\n      })\r\n      .then(data => {\r\n        // return idb restaurant data if found (up-to-date data)\r\n        if (data && data.length > 0) return callback(null, data);\r\n        else {\r\n          fetch(`${DBHelper.REST_URL}/${DBHelper.STORE_RESTAURANTS}`)\r\n            .then(resp => {\r\n              if (resp.status !== 200)\r\n                console.error(`Could not retrieve restaurants data. Status: ${response.status}`);\r\n              else return resp.json();\r\n            })\r\n            .then(restaurants => {\r\n              DBHelper.getDb().then(db => {\r\n                if (!db) return;\r\n\r\n                const store = db\r\n                  .transaction(DBHelper.STORE_RESTAURANTS, 'readwrite')\r\n                  .objectStore(DBHelper.STORE_RESTAURANTS);\r\n\r\n                restaurants.map(restaurant => {\r\n                  restaurant.pendingUpdate = false;\r\n                  store.put(restaurant);\r\n                });\r\n              });\r\n              return callback(null, restaurants);\r\n            })\r\n            .catch(err => console.error(`[${APP_NAME}] request failed: ${err}`));\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurant reviews\r\n   * @param {Function} callback function to be triggered after reviews are returned\r\n   */\r\n  static fetchReviews(callback) {\r\n    DBHelper.getDb()\r\n      .then(db => {\r\n        if (!db) return;\r\n\r\n        return db\r\n          .transaction(DBHelper.STORE_REVIEWS)\r\n          .objectStore(DBHelper.STORE_REVIEWS)\r\n          .getAll();\r\n      })\r\n      .then(data => {\r\n        // return idb restaurant data if found (up-to-date data)\r\n        if (data && data.length > 0) return callback(null, data);\r\n        else {\r\n          fetch(`${DBHelper.REST_URL}/${DBHelper.STORE_REVIEWS}`)\r\n            .then(resp => {\r\n              if (resp.status !== 200)\r\n                console.error(`Could not retrieve reviews data. Status: ${response.status}`);\r\n              else return resp.json();\r\n            })\r\n            .then(reviews => {\r\n              // save reviews to idb\r\n              DBHelper.getDb()\r\n                .then(db => {\r\n                  if (!db) return;\r\n\r\n                  const store = db\r\n                    .transaction(DBHelper.STORE_REVIEWS, 'readwrite')\r\n                    .objectStore(DBHelper.STORE_REVIEWS);\r\n\r\n                  if (reviews && reviews.length > 0) {\r\n                    reviews.map(review => {\r\n                      review.pendingUpdate = false;\r\n                      store.put(review);\r\n                    });\r\n                  }\r\n                });\r\n\r\n              return callback(null, reviews);\r\n            });\r\n        }\r\n      })\r\n      .catch(err => console.error(`[${APP_NAME}] exception in getting reviews: ${err}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch reviews by restaurant id\r\n   * @param {String} id - id of restaurant\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchReviewsByRestaurantId(id, callback) {\r\n    DBHelper.fetchReviews((error, reviews) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const reviewsList = reviews.filter(review => review.restaurant_id == id);\r\n\r\n        if (reviewsList)\r\n          callback(null, reviewsList);\r\n        else\r\n          callback(`[${APP_NAME}] reviews for restaurant id '${id}' do not exist`, null);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by id\r\n   * @param {String} id - id of restaurant\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const restaurant = restaurants.find(restaurant => restaurant.id == id);\r\n        if (restaurant)\r\n          callback(null, restaurant);\r\n        else\r\n          callback(`[${APP_NAME}] restaurant '${restaurant}' does not exist`, null);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants and filter by a cuisine type\r\n   * @param {String} cuisine - type of cuisine to search for\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else\r\n        callback(null, restaurants.filter(restaurant => restaurant.cuisine_type === cuisine));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants and filter by a neighborhood\r\n   * @param {String} neighborhood - type of neighborhood to search for\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else\r\n        callback(null, restaurants.filter(restaurant => restaurant.neighborhood === neighborhood));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood\r\n   * @param {String} cuisine - type of cuisine to search for\r\n   * @param {String} neighborhood - type of neighborhood to search for\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        let results = restaurants;\r\n        if (cuisine !== 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(restaurant => restaurant.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood !== 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(restaurant => restaurant.neighborhood === neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchCuisines(callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build restaurant page URL\r\n   * @param {Object} restaurant - restaurant object to be used to fill url\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Build restaurant image URL\r\n   * @param {Object} restaurant - restaurant object to be used to fill url\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph ?\r\n      `img/${restaurant.photograph}.webp` :\r\n      'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant\r\n   * @param {Object} restaurant - restaurant object to be used to fill url\r\n   * @param {Object} map - Google map object\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    return new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Favorite/unfavorite a restaurant\r\n   * @param {String} id restaurant id\r\n   * @param {Boolean} state true/false - favorite/unfavorite\r\n   */\r\n  static favoriteRestaurant(restaurant, state) {\r\n    if (!restaurant || typeof state !== 'boolean') return;\r\n\r\n    restaurant.is_favorite = state;\r\n\r\n    fetch(`${DBHelper.REST_URL}/restaurants/${restaurant.id}/?is_favorite=${state}`, {\r\n      method: 'PUT'\r\n    }).then(resp => {\r\n      if (resp.status != 200)\r\n        console.info(`[${APP_NAME}] response was not successful. Response: ${resp}`);\r\n    }).catch(e => {\r\n      console.error(`[${APP_NAME}] put request failed. Could not ${state ? 'favorite' : 'unfavorite'} restaurant '${restaurant.id}'. Error: ${e}`);\r\n    });\r\n\r\n    // update idb record\r\n    DBHelper.getDb().then(db => {\r\n      if (!db) return;\r\n\r\n      const store = db\r\n        .transaction(DBHelper.STORE_RESTAURANTS, 'readwrite')\r\n        .objectStore(DBHelper.STORE_RESTAURANTS);\r\n\r\n      store.put(restaurant);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Covert string to boolean\r\n * @param {any} str string variable (if other then evaluate if bool)\r\n */\r\nstringToBoolean = str => {\r\n  if (typeof str === 'string') {\r\n    switch (str.toLowerCase().trim()) {\r\n      case 'true':\r\n      case 'yes':\r\n      case '1':\r\n        return true;\r\n      case 'false':\r\n      case 'no':\r\n      case '0':\r\n      case null:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  return Boolean(str);\r\n}","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});"],"sourceRoot":"/source/"}