{"version":3,"sources":["restaurant_list.js","dbhelper.js","idb.js"],"names":["navigator","serviceWorker","register","scope","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","addGoogleMap","script","createElement","type","src","body","appendChild","DBHelper","error","neighborhoods","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","innerHTML","value","append","cuisines","fillCuisinesHTML","cuisine","window","initMap","map","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","restaurants","resetRestaurants","fillRestaurantsHTML","lazyLoadImages","call","querySelectorAll","img","setAttribute","getAttribute","onload","removeAttribute","markers","length","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","imageUrlForRestaurant","alt","name","cuisine_type","classList","add","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push","log","DATABASE_URL","[object Object]","callback","fetch","then","resp","status","json","response","catch","e","id","fetchRestaurants","find","r","results","filter","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","photograph","Marker","position","latlng","title","animation","Animation","DROP","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","nativeObject","getAll","query","count","instance","items","iterateCursor","undefined","continue","exp","open","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","idb"],"mappings":"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","file":"restaurant_list.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines,\r\n  map,\r\n  markers = [];\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', { scope: './' });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  addGoogleMap();\r\n});\r\n\r\n/**\r\n * Async add google map\r\n */\r\naddGoogleMap = () => {\r\n  const API_KEY = 'AIzaSyDRi2AMR_VvvpKmGp448AvanrS9zp_XSNc',\r\n    script = document.createElement('script');\r\n\r\n  script.type = 'text/javascript';\r\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initMap`;\r\n  document.body.appendChild(script);\r\n};\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n        lazyLoadImages();\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Load page images after restaurant DOM has been added\r\n */\r\nlazyLoadImages = () => {\r\n  [].forEach.call(document.querySelectorAll('img[data-src]'), function(img) {\r\n    img.setAttribute('src', img.getAttribute('data-src'));\r\n    img.onload = function() {\r\n      img.removeAttribute('data-src');\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers && self.markers.length > 0) {\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n  }\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant));\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${\r\n    restaurant.cuisine_type\r\n  }`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    if (self.markers) self.markers.push(marker);\r\n  });\r\n};\r\n\r\n// my signature\r\nconsole.log(\r\n  `%c AV-RR %c Andris Vilde: Restaurant Reviews`,\r\n  'background: #2196F3; color: #fff; font-size: 12px; border-radius: 3px 0 0 3px; font-family: Tahoma;',\r\n  'background: #bee1fd; color: #000; font-size: 12px; border-radius: 0 3px 3px 0; font-family: Tahoma;'\r\n);\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(resp => {\r\n        if (resp.status !== 200)\r\n          console.error(\r\n            `Could not retrieve restaurants data. Status:${response.status}`\r\n          );\r\n        else return resp.json();\r\n      })\r\n      .then(restaurants => callback(null, restaurants))\r\n      .catch(e => console.error(`Request failed. Returned error: ${e}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph\r\n      ? `img/${restaurant.photograph}.webp`\r\n      : 'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());"],"sourceRoot":"/source/"}