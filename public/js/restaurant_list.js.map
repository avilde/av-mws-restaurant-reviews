{"version":3,"sources":["restaurant_list.js","dbhelper.js","idb.js","lozad.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","navigator","serviceWorker","register","scope","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","addGoogleMap","script","createElement","type","src","body","appendChild","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","lazyLoadImages","lozad","observe","length","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","setAttribute","imageUrlForRestaurant","alt","name","cuisine_type","classList","add","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push","DATABASE_URL","DB_NAME","STORE_NAME","DB_VER","[object Object]","idb","open","upgrade","createObjectStore","keyPath","createIndex","callback","getDb","then","db","transaction","objectStore","getAll","data","fetch","resp","status","json","response","store","r","put","catch","e","id","fetchRestaurants","find","results","filter","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","photograph","Marker","position","latlng","title","animation","Animation","DROP","log","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","t","define","amd","assign","n","hasOwnProperty","documentMode","rootMargin","threshold","load","nodeName","toLowerCase","getAttribute","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","IntersectionObserver","a","intersectionRatio","unobserve","target","Element","NodeList","querySelectorAll","triggerLoad"],"mappings":"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","file":"restaurant_list.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines,\r\n  map,\r\n  markers = [];\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', { scope: './' });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  addGoogleMap();\r\n});\r\n\r\n/**\r\n * Async add google map\r\n */\r\naddGoogleMap = () => {\r\n  const API_KEY = 'AIzaSyDRi2AMR_VvvpKmGp448AvanrS9zp_XSNc',\r\n    script = document.createElement('script');\r\n\r\n  script.type = 'text/javascript';\r\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initMap`;\r\n  document.body.appendChild(script);\r\n};\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n        lazyLoadImages();\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Load page images after restaurant DOM has been added\r\n */\r\nlazyLoadImages = () => {\r\n  const observer = lozad();\r\n  observer.observe();\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers && self.markers.length > 0) {\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n  }\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img lozad';\r\n  image.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant));\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${\r\n    restaurant.cuisine_type\r\n  }`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    if (self.markers) self.markers.push(marker);\r\n  });\r\n};\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * database name (= service worker name)\r\n   */\r\n  static get DB_NAME() {\r\n    return 'av-rr';\r\n  }\r\n\r\n  /**\r\n   * Indexed db store name\r\n   */\r\n  static get STORE_NAME() {\r\n    return 'restaurants';\r\n  }\r\n\r\n  /**\r\n   * Indexed db version\r\n   */\r\n  static get DB_VER() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Get indexed database promise\r\n   */\r\n  static getDb() {\r\n    return idb.open(DBHelper.DB_NAME, DBHelper.DB_VER, upgrade => {\r\n      const store = upgrade.createObjectStore(DBHelper.STORE_NAME, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      store.createIndex('by-id', 'id');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.getDb()\r\n      .then(db => {\r\n        if (!db) return;\r\n\r\n        return db\r\n          .transaction(DBHelper.STORE_NAME)\r\n          .objectStore(DBHelper.STORE_NAME)\r\n          .getAll();\r\n      })\r\n      .then(data => {\r\n        if (data && data.length > 0) return callback(null, data);\r\n        else {\r\n          // idb restaurant data\r\n          fetch(DBHelper.DATABASE_URL)\r\n            .then(resp => {\r\n              if (resp.status !== 200)\r\n                console.error(\r\n                  `Could not retrieve restaurants data. Status:${\r\n                    response.status\r\n                  }`\r\n                );\r\n              else return resp.json();\r\n            })\r\n            .then(restaurants => {\r\n              DBHelper.getDb().then(db => {\r\n                if (!db) return;\r\n\r\n                const store = db\r\n                  .transaction(DBHelper.STORE_NAME, 'readwrite')\r\n                  .objectStore(DBHelper.STORE_NAME);\r\n\r\n                restaurants.map(r => store.put(r));\r\n              });\r\n              return callback(null, restaurants);\r\n            })\r\n            .catch(e => console.error(`Request failed. Returned error: ${e}`));\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph\r\n      ? `img/${restaurant.photograph}.webp`\r\n      : 'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\n// my signature\r\nconsole.log(\r\n  `%c AV-RR %c Andris Vilde: Restaurant Reviews `,\r\n  'background: #2196F3; color: #fff; font-size: 12px; border-radius: 3px 0 0 3px; font-family: Tahoma;',\r\n  'background: #bee1fd; color: #000; font-size: 12px; border-radius: 0 3px 3px 0; font-family: Tahoma;'\r\n);\r\n","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});"],"sourceRoot":"/source/"}