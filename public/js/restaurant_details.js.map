{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/restaurant_details.js","src/js/utils/dbhelper.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","navigator","serviceWorker","register","scope","initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","undefined","name","classList","add","innerHTML","address","image","className","alt","cuisine_type","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","repeat","parseInt","comments","breadcrumb","setAttribute","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","fetch","DATABASE_URL","then","resp","json","restaurants","catch","log","fetchRestaurants","find","cuisine","filter","neighborhood","neighborhoods","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","Marker","position","urlForRestaurant","animation","Animation","DROP"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,gBCAAN,EAAQ,oBAOJ,kBAAmBW,WACrBA,UAAUC,cAAcC,SAAS,SAAWC,MAAO,OAMrDC,QAAU,WACRC,uBAAuB,SAACC,EAAOC,GACzBD,EAEFE,QAAQF,MAAMA,IAEdG,KAAKC,IAAM,IAAIC,OAAOC,KAAKC,IAAIC,SAASC,eAAe,QACrDC,KAAM,GACNC,OAAQV,EAAWW,OACnBC,aAAa,IAEfC,iBACAC,SAASC,uBAAuBb,KAAKF,WAAYE,KAAKC,SAQ5DL,uBAAyB,SAACkB,GACxB,GAAId,KAAKF,WAEPgB,EAAS,KAAMd,KAAKF,gBAFtB,CAKA,IAAMiB,EAAKC,mBAAmB,MACzBD,EAKHH,SAASK,oBAAoBF,EAAI,SAAClB,EAAOC,IACvCE,KAAKF,WAAaA,IAKlBoB,qBACAJ,EAAS,KAAMhB,IAJbC,QAAQF,MAAMA,MANlBA,MAAQ,0BACRiB,EAASjB,MAAO,SAiBpBqB,mBAAqB,WAAkC,IAAjCpB,EAAiC,EAAAqB,UAAA/B,aAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAApBnB,KAAKF,WAChCuB,EAAOhB,SAASC,eAAe,mBACrCe,EAAKC,UAAUC,IAAI,mBACnBF,EAAKG,UAAY1B,EAAWuB,KAEZhB,SAASC,eAAe,sBAChCkB,UAAY1B,EAAW2B,QAE/B,IAAMC,EAAQrB,SAASC,eAAe,kBACtCoB,EAAMC,UAAY,iBAClBD,EAAME,IAAN,cAA0B9B,EAAWuB,KAArC,cAAuDvB,EAAW+B,aAClEH,EAAMI,IAAMlB,SAASmB,sBAAsBjC,GAE3BO,SAASC,eAAe,sBAChCkB,UAAY1B,EAAW+B,aAG3B/B,EAAWkC,iBACbC,0BAGFC,mBAMFD,wBAA0B,WAErB,IADHE,EACG,EAAAhB,UAAA/B,aAAAgC,IAAAD,UAAA,GAAAA,UAAA,GADcnB,KAAKF,WAAWkC,gBAE3BI,EAAQ/B,SAASC,eAAe,oBACtC,IAAK,IAAI+B,KAAOF,EAAgB,CAC9B,IAAMG,EAAMjC,SAASkC,cAAc,MAE7BC,EAAMnC,SAASkC,cAAc,MACnCC,EAAIhB,UAAYa,EAChBC,EAAIG,YAAYD,GAEhB,IAAME,EAAOrC,SAASkC,cAAc,MACpCG,EAAKlB,UAAYW,EAAeE,GAChCC,EAAIG,YAAYC,GAEhBN,EAAMK,YAAYH,KAOtBJ,gBAAkB,WAAuC,IAAtCS,EAAsC,EAAAxB,UAAA/B,aAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAA5BnB,KAAKF,WAAW6C,QACrCC,EAAYvC,SAASC,eAAe,qBACpCuC,EAAQxC,SAASkC,cAAc,MAIrC,GAHAM,EAAMrB,UAAY,UAClBoB,EAAUH,YAAYI,IAEjBF,EAAS,CACZ,IAAMG,EAAYzC,SAASkC,cAAc,KAGzC,OAFAO,EAAUtB,UAAY,uBACtBoB,EAAUH,YAAYK,GAGxB,IAAMC,EAAK1C,SAASC,eAAe,gBACnCqC,EAAQK,QAAQ,SAAAC,GACdF,EAAGN,YAAYS,iBAAiBD,MAElCL,EAAUH,YAAYM,IAMxBG,iBAAmB,SAACD,GAClB,IAAME,EAAK9C,SAASkC,cAAc,MAC5BlB,EAAOhB,SAASkC,cAAc,KACpClB,EAAKC,UAAUC,IAAI,eACnBF,EAAKG,UAAYyB,EAAO5B,KACxB8B,EAAGV,YAAYpB,GAEf,IAAM+B,EAAO/C,SAASkC,cAAc,QACpCa,EAAK9B,UAAUC,IAAI,eACnB6B,EAAK5B,UAAYyB,EAAOG,KACxB/B,EAAKoB,YAAYW,GAEjB,IAAMC,EAAShD,SAASkC,cAAc,KACtCc,EAAO/B,UAAUC,IAAI,UACrB8B,EAAO7B,UAAP,WAA8B,wBAAwB8B,OAAOC,SAASN,EAAOI,SAC7EF,EAAGV,YAAYY,GAEf,IAAMG,EAAWnD,SAASkC,cAAc,KAIxC,OAHAiB,EAAShC,UAAYyB,EAAOO,SAC5BL,EAAGV,YAAYe,GAERL,GAMTxC,eAAiB,WAAkC,IAAjCb,EAAiC,EAAAqB,UAAA/B,aAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAApBnB,KAAKF,WAC5B2D,EAAapD,SAASC,eAAe,cACrC6C,EAAK9C,SAASkC,cAAc,MAClCY,EAAG3B,UAAY1B,EAAWuB,KAC1B8B,EAAGO,aAAa,eAAgB,QAChCD,EAAWhB,YAAYU,IAMzBnC,mBAAqB,SAACK,EAAMsC,GACrBA,IAAKA,EAAMC,OAAOC,SAASC,MAChCzC,EAAOA,EAAK0C,QAAQ,UAAW,QAC/B,IACEC,EADY,IAAIC,OAAJ,OAAkB5C,EAAlB,qBACI6C,KAAKP,GACvB,OAAKK,EACAA,EAAQ,GACNG,mBAAmBH,EAAQ,GAAGD,QAAQ,MAAO,MAD5B,GADH,4TC5KjBnD,wLAcoBE,GACtBsD,MAAMxD,EAASyD,cACZC,KAAK,SAAAC,GAAA,OAAQA,EAAKC,SAClBF,KAAK,SAAAG,GAAA,OAAe3D,EAAS,KAAM2D,KACnCC,MAAM,SAAAtG,GAAA,OAAK2B,QAAQ4E,IAAR,mCAA+CvG,iDAMpC2C,EAAID,GAE7BF,EAASgE,iBAAiB,SAAC/E,EAAO4E,GAChC,GAAI5E,EACFiB,EAASjB,EAAO,UACX,CACL,IAAMC,EAAa2E,EAAYI,KAAK,SAAAtG,GAAA,OAAKA,EAAEwC,IAAMA,IAC7CjB,EACFgB,EAAS,KAAMhB,GAEfgB,EAAS,4BAA6B,0DASdgE,EAAShE,GAEvCF,EAASgE,iBAAiB,SAAC/E,EAAO4E,GAChC,GAAI5E,EACFiB,EAASjB,EAAO,UACX,CAEL,IAAMmE,EAAUS,EAAYM,OAAO,SAAAxG,GAAA,OAAKA,EAAEsD,cAAgBiD,IAC1DhE,EAAS,KAAMkD,4DAQgBgB,EAAclE,GAEjDF,EAASgE,iBAAiB,SAAC/E,EAAO4E,GAChC,GAAI5E,EACFiB,EAASjB,EAAO,UACX,CAEL,IAAMmE,EAAUS,EAAYM,OAAO,SAAAxG,GAAA,OAAKA,EAAEyG,cAAgBA,IAC1DlE,EAAS,KAAMkD,sEAQ0Bc,EAASE,EAAclE,GAEpEF,EAASgE,iBAAiB,SAAC/E,EAAO4E,GAChC,GAAI5E,EACFiB,EAASjB,EAAO,UACX,CACL,IAAImE,EAAUS,EACC,OAAXK,IACFd,EAAUA,EAAQe,OAAO,SAAAxG,GAAA,OAAKA,EAAEsD,cAAgBiD,KAE9B,OAAhBE,IACFhB,EAAUA,EAAQe,OAAO,SAAAxG,GAAA,OAAKA,EAAEyG,cAAgBA,KAElDlE,EAAS,KAAMkD,iDAQKlD,GAExBF,EAASgE,iBAAiB,SAAC/E,EAAO4E,GAChC,GAAI5E,EACFiB,EAASjB,EAAO,UACX,CAEL,IAAMoF,EAAgBR,EAAYxE,IAAI,SAACiF,EAAGrG,GAAJ,OAAU4F,EAAY5F,GAAGmG,eAEzDG,EAAsBF,EAAcF,OAAO,SAACG,EAAGrG,GAAJ,OAAUoG,EAAcG,QAAQF,IAAMrG,IACvFiC,EAAS,KAAMqE,4CAQArE,GAEnBF,EAASgE,iBAAiB,SAAC/E,EAAO4E,GAChC,GAAI5E,EACFiB,EAASjB,EAAO,UACX,CAEL,IAAMwF,EAAWZ,EAAYxE,IAAI,SAACiF,EAAGrG,GAAJ,OAAU4F,EAAY5F,GAAGgD,eAEpDyD,EAAiBD,EAASN,OAAO,SAACG,EAAGrG,GAAJ,OAAUwG,EAASD,QAAQF,IAAMrG,IACxEiC,EAAS,KAAMwE,+CAQGxF,GACtB,MAAA,wBAAgCA,EAAWiB,iDAMhBjB,GAC3B,MAAA,OAAeA,EAAWyF,WAA1B,uDAM4BzF,EAAYG,GAQxC,OAPe,IAAIC,OAAOC,KAAKqF,QAC7BC,SAAU3F,EAAWW,OACrBoC,MAAO/C,EAAWuB,KAClBsC,IAAK/C,EAAS8E,iBAAiB5F,GAC/BG,IAAKA,EACL0F,UAAWzF,OAAOC,KAAKyF,UAAUC,4CAhJnC,MAAA,6CAuJJvG,EAAOJ,QAAU0B","file":"restaurant_details.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","require('./utils/dbhelper');\r\n\r\nlet restaurant, map;\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('sw.js', { scope: './' });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) {\r\n    // restaurant already fetched!\r\n    callback(null, self.restaurant);\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) {\r\n    // no id found in URL\r\n    error = 'No restaurant id in URL';\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${restaurant.cuisine_type}`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n};\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (\r\n  operatingHours = self.restaurant.operating_hours\r\n) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n};\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n};\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.classList.add('review-name');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('span');\r\n  date.classList.add('review-date');\r\n  date.innerHTML = review.date;\r\n  name.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.classList.add('rating');\r\n  rating.innerHTML = `Rating: ${'<span>&#x2605;</span>'.repeat(parseInt(review.rating))}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page');\r\n  breadcrumb.appendChild(li);\r\n};\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n};\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(resp => resp.json())\r\n      .then(restaurants => callback(null, restaurants))\r\n      .catch(e => console.log(`Request failed. Returned error: ${e}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`img/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;"],"sourceRoot":"/source/"}