{"version":3,"sources":["restaurant_details.js","dbhelper.js","idb.js","lozad.js"],"names":["restaurant","map","navigator","serviceWorker","register","scope","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","classList","add","innerHTML","address","image","className","alt","cuisine_type","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","repeat","parseInt","comments","breadcrumb","setAttribute","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","DATABASE_URL","DB_NAME","STORE_NAME","DB_VER","[object Object]","idb","open","upgrade","createObjectStore","keyPath","createIndex","getDb","then","db","transaction","objectStore","getAll","data","length","fetch","resp","status","json","response","restaurants","store","r","put","catch","e","fetchRestaurants","find","cuisine","filter","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","Marker","position","urlForRestaurant","animation","Animation","DROP","log","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","t","define","amd","lozad","assign","n","hasOwnProperty","documentMode","rootMargin","threshold","load","nodeName","toLowerCase","getAttribute","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","IntersectionObserver","a","intersectionRatio","unobserve","target","observe","Element","NodeList","querySelectorAll","triggerLoad"],"mappings":"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","file":"restaurant_details.js","sourcesContent":["let restaurant, map;\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', { scope: './' });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = callback => {\r\n  if (self.restaurant) {\r\n    // restaurant already fetched!\r\n    callback(null, self.restaurant);\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) {\r\n    // no id found in URL\r\n    error = 'No restaurant id in URL';\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${\r\n    restaurant.cuisine_type\r\n  }`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n};\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (\r\n  operatingHours = self.restaurant.operating_hours\r\n) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n};\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n};\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = review => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.classList.add('review-name');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('span');\r\n  date.classList.add('review-date');\r\n  date.innerHTML = review.date;\r\n  name.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.classList.add('rating');\r\n  rating.innerHTML = `Rating: ${'<span>&#x2605;</span>'.repeat(\r\n    parseInt(review.rating)\r\n  )}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page');\r\n  breadcrumb.appendChild(li);\r\n};\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n};\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * database name (= service worker name)\r\n   */\r\n  static get DB_NAME() {\r\n    return 'av-rr';\r\n  }\r\n\r\n  /**\r\n   * Indexed db store name\r\n   */\r\n  static get STORE_NAME() {\r\n    return 'restaurants';\r\n  }\r\n\r\n  /**\r\n   * Indexed db version\r\n   */\r\n  static get DB_VER() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Get indexed database promise\r\n   */\r\n  static getDb() {\r\n    return idb.open(DBHelper.DB_NAME, DBHelper.DB_VER, upgrade => {\r\n      const store = upgrade.createObjectStore(DBHelper.STORE_NAME, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      store.createIndex('by-id', 'id');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.getDb()\r\n      .then(db => {\r\n        if (!db) return;\r\n\r\n        return db\r\n          .transaction(DBHelper.STORE_NAME)\r\n          .objectStore(DBHelper.STORE_NAME)\r\n          .getAll();\r\n      })\r\n      .then(data => {\r\n        if (data && data.length > 0) return callback(null, data);\r\n        else {\r\n          // idb restaurant data\r\n          fetch(DBHelper.DATABASE_URL)\r\n            .then(resp => {\r\n              if (resp.status !== 200)\r\n                console.error(\r\n                  `Could not retrieve restaurants data. Status:${\r\n                    response.status\r\n                  }`\r\n                );\r\n              else return resp.json();\r\n            })\r\n            .then(restaurants => {\r\n              DBHelper.getDb().then(db => {\r\n                if (!db) return;\r\n\r\n                const store = db\r\n                  .transaction(DBHelper.STORE_NAME, 'readwrite')\r\n                  .objectStore(DBHelper.STORE_NAME);\r\n\r\n                restaurants.map(r => store.put(r));\r\n              });\r\n              return callback(null, restaurants);\r\n            })\r\n            .catch(e => console.error(`Request failed. Returned error: ${e}`));\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph\r\n      ? `img/${restaurant.photograph}.webp`\r\n      : 'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\n// my signature\r\nconsole.log(\r\n  `%c AV-RR %c Andris Vilde: Restaurant Reviews `,\r\n  'background: #2196F3; color: #fff; font-size: 12px; border-radius: 3px 0 0 3px; font-family: Tahoma;',\r\n  'background: #bee1fd; color: #000; font-size: 12px; border-radius: 0 3px 3px 0; font-family: Tahoma;'\r\n);\r\n","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});"],"sourceRoot":"/source/"}