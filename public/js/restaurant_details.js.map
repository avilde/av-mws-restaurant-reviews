{"version":3,"sources":["signature.js","restaurant_details.js","dbhelper.js","idb.js","lozad.js"],"names":["APP_NAME","MAP_API_KEY","restaurant","map","console","log","navigator","serviceWorker","register","scope","document","addEventListener","event","addGoogleMap","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","classList","add","innerHTML","address","image","className","alt","cuisine_type","src","imageUrlForRestaurant","favToggle","stringToBoolean","is_favorite","favoriteRestaurant","target","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","indexOf","remove","operatingHours","hours","key","row","createElement","day","appendChild","time","reviewsList","reviews","fetchReviewsByRestaurantId","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","Date","createdAt","toDateString","rating","repeat","parseInt","comments","breadcrumb","setAttribute","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","script","type","body","REST_URL","DB_NAME","STORE_RESTAURANTS","STORE_REVIEWS","DB_VER","[object Object]","idb","open","upgrade","createObjectStore","keyPath","getDb","then","db","transaction","objectStore","getAll","data","length","fetch","resp","status","json","response","restaurants","store","pendingUpdate","put","catch","err","fetchReviews","filter","restaurant_id","fetchRestaurants","find","cuisine","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","cuisines","uniqueCuisines","photograph","Marker","position","urlForRestaurant","animation","Animation","DROP","state","method","info","e","str","toLowerCase","trim","Boolean","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default","t","define","amd","lozad","assign","r","n","hasOwnProperty","documentMode","rootMargin","threshold","load","nodeName","getAttribute","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","IntersectionObserver","a","intersectionRatio","unobserve","observe","Element","NodeList","querySelectorAll","triggerLoad"],"mappings":"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","file":"restaurant_details.js","sourcesContent":["const APP_NAME = 'av-rr';\r\n\r\nconst MAP_API_KEY = 'AIzaSyB1eWmbJ77N0GZFASeLjh0oMWGAi0BKnHc';\r\n\r\n// my signature\r\nconsole.log(\r\n    `%c ${APP_NAME} %c restaurant reviews `,\r\n    'background: #2196F3; color: #fff; font-size: 12px; border-radius: 3px 0 0 3px; font-family: Tahoma;',\r\n    'background: #bee1fd; color: #000; font-size: 12px; border-radius: 0 3px 3px 0; font-family: Tahoma;'\r\n);\r\n","let restaurant, map;\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', {\r\n    scope: './'\r\n  });\r\n}\r\n\r\n/**\r\n * Load Google Map & Restaurant data\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  addGoogleMap();\r\n});\r\n\r\n/**\r\n * Initialize Google map & load restaurant details\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Get current restaurant from page URL\r\n * @param {Function} callback - calback to be executed\r\n */\r\nfetchRestaurantFromURL = callback => {\r\n  if (self.restaurant) {\r\n    return callback(null, self.restaurant);\r\n  }\r\n\r\n  const id = getParameterByName('id');\r\n  if (!id) callback('No restaurant id found in URL', null);\r\n  else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) return console.error(error);\r\n\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Build restaurant HTML and add it to the webpage\r\n * @param {Object} restaurant\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${restaurant.cuisine_type}`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  const favToggle = document.getElementById('favorite');\r\n  if (stringToBoolean(restaurant.is_favorite)) favToggle.classList.add('is-favorite');\r\n  favToggle.addEventListener('click', event => {\r\n    favoriteRestaurant(event.target, restaurant);\r\n  });\r\n\r\n  if (restaurant.operating_hours) fillRestaurantHoursHTML();\r\n\r\n  if (restaurant) fillReviewsHTML(restaurant);\r\n};\r\n\r\n/**\r\n * Favorite/unfavorite restaurant\r\n * @param {Object} target - event target\r\n * @param {Object} restaurant\r\n */\r\nfavoriteRestaurant = (target, restaurant) => {\r\n  if (target.className.indexOf('is-favorite') > -1) {\r\n    target.classList.remove('is-favorite');\r\n    DBHelper.favoriteRestaurant(restaurant, false);\r\n  } else {\r\n    target.classList.add('is-favorite');\r\n    DBHelper.favoriteRestaurant(restaurant, true);\r\n  }\r\n};\r\n\r\n/**\r\n * Setup restaurant operating hours HTML table and add it to the webpage\r\n * @param {Object} operatingHours\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n};\r\n\r\n/**\r\n * Get restaurant reviews and build HTML for them\r\n * @param {Object} restaurant\r\n */\r\nfillReviewsHTML = (restaurant = self.restaurant) => {\r\n  let reviewsList;\r\n\r\n  if (self.restaurant.reviews) reviewsList = self.restaurant.reviews;\r\n  else\r\n    DBHelper.fetchReviewsByRestaurantId(restaurant.id, (error, reviews) => {\r\n      if (!reviews) return console.error(error);\r\n\r\n      reviewsList = self.restaurant.reviews = reviews;\r\n\r\n      const container = document.getElementById('reviews-container');\r\n      const title = document.createElement('h2');\r\n      title.innerHTML = 'Reviews';\r\n      container.appendChild(title);\r\n\r\n      if (!reviewsList) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n      }\r\n      const ul = document.getElementById('reviews-list');\r\n      reviewsList.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n      });\r\n      container.appendChild(ul);\r\n    });\r\n};\r\n\r\n/**\r\n * Create review HTML and add it to the webpage\r\n * @param {Object} review - individual review for restaurant\r\n */\r\ncreateReviewHTML = review => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.classList.add('review-name');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('span');\r\n  date.classList.add('review-date');\r\n  date.innerHTML = new Date(review.createdAt).toDateString();\r\n  name.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.classList.add('rating');\r\n  rating.innerHTML = `Rating: ${'<span>&#x2605;</span>'.repeat(parseInt(review.rating))}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n * @param {Object} restaurant\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page');\r\n  breadcrumb.appendChild(li);\r\n};\r\n\r\n/**\r\n * Get a parameter by name from page URL\r\n * @param {String} name - name of param\r\n * @param {String} url - URL\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n};\r\n\r\n/**\r\n * Async add google map\r\n */\r\naddGoogleMap = () => {\r\n  let script = document.createElement('script');\r\n\r\n  script.type = 'text/javascript';\r\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${MAP_API_KEY}&callback=initMap`;\r\n  document.body.appendChild(script);\r\n};\r\n","/**\r\n * Common database helper functions\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * REST API location\r\n   */\r\n  static get REST_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * database name (= service worker name)\r\n   */\r\n  static get DB_NAME() {\r\n    return APP_NAME;\r\n  }\r\n\r\n  /**\r\n   * Indexed db store name for restaurants\r\n   */\r\n  static get STORE_RESTAURANTS() {\r\n    return 'restaurants';\r\n  }\r\n\r\n  /**\r\n   * Indexed db store name for reviews\r\n   */\r\n  static get STORE_REVIEWS() {\r\n    return 'reviews';\r\n  }\r\n\r\n  /**\r\n   * Indexed db version\r\n   */\r\n  static get DB_VER() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Get indexed database promise\r\n   */\r\n  static getDb() {\r\n    return idb.open(DBHelper.DB_NAME, DBHelper.DB_VER, upgrade => {\r\n      const storeRestaurants = upgrade.createObjectStore(DBHelper.STORE_RESTAURANTS, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      //storeRestaurants.createIndex('by-id', 'id');\r\n\r\n      const storeReviews = upgrade.createObjectStore(DBHelper.STORE_REVIEWS, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      //storeReviews.createIndex('by-restaurant-id', 'restaurant_id');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   * @param {Function} callback function to be triggered after restaurants are returned\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.getDb()\r\n      .then(db => {\r\n        if (!db) return;\r\n\r\n        return db\r\n          .transaction(DBHelper.STORE_RESTAURANTS)\r\n          .objectStore(DBHelper.STORE_RESTAURANTS)\r\n          .getAll();\r\n      })\r\n      .then(data => {\r\n        // return idb restaurant data if found (up-to-date data)\r\n        if (data && data.length > 0) return callback(null, data);\r\n        else {\r\n          fetch(`${DBHelper.REST_URL}/${DBHelper.STORE_RESTAURANTS}`)\r\n            .then(resp => {\r\n              if (resp.status !== 200)\r\n                console.error(`Could not retrieve restaurants data. Status: ${response.status}`);\r\n              else return resp.json();\r\n            })\r\n            .then(restaurants => {\r\n              DBHelper.getDb().then(db => {\r\n                if (!db) return;\r\n\r\n                const store = db\r\n                  .transaction(DBHelper.STORE_RESTAURANTS, 'readwrite')\r\n                  .objectStore(DBHelper.STORE_RESTAURANTS);\r\n\r\n                restaurants.map(restaurant => {\r\n                  restaurant.pendingUpdate = false;\r\n                  store.put(restaurant);\r\n                });\r\n              });\r\n              return callback(null, restaurants);\r\n            })\r\n            .catch(err => console.error(`[${APP_NAME}] request failed: ${err}`));\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurant reviews\r\n   * @param {Function} callback function to be triggered after reviews are returned\r\n   */\r\n  static fetchReviews(callback) {\r\n    DBHelper.getDb()\r\n      .then(db => {\r\n        if (!db) return;\r\n\r\n        return db\r\n          .transaction(DBHelper.STORE_REVIEWS)\r\n          .objectStore(DBHelper.STORE_REVIEWS)\r\n          .getAll();\r\n      })\r\n      .then(data => {\r\n        // return idb restaurant data if found (up-to-date data)\r\n        if (data && data.length > 0) return callback(null, data);\r\n        else {\r\n          fetch(`${DBHelper.REST_URL}/${DBHelper.STORE_REVIEWS}`)\r\n            .then(resp => {\r\n              if (resp.status !== 200)\r\n                console.error(`Could not retrieve reviews data. Status: ${response.status}`);\r\n              else return resp.json();\r\n            })\r\n            .then(reviews => {\r\n              // save reviews to idb\r\n              DBHelper.getDb()\r\n                .then(db => {\r\n                  if (!db) return;\r\n\r\n                  const store = db\r\n                    .transaction(DBHelper.STORE_REVIEWS, 'readwrite')\r\n                    .objectStore(DBHelper.STORE_REVIEWS);\r\n\r\n                  if (reviews && reviews.length > 0) {\r\n                    reviews.map(review => {\r\n                      review.pendingUpdate = false;\r\n                      store.put(review);\r\n                    });\r\n                  }\r\n                });\r\n\r\n              return callback(null, reviews);\r\n            });\r\n        }\r\n      })\r\n      .catch(err => console.error(`[${APP_NAME}] exception in getting reviews: ${err}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch reviews by restaurant id\r\n   * @param {String} id - id of restaurant\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchReviewsByRestaurantId(id, callback) {\r\n    DBHelper.fetchReviews((error, reviews) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const reviewsList = reviews.filter(review => review.restaurant_id == id);\r\n\r\n        if (reviewsList)\r\n          callback(null, reviewsList);\r\n        else\r\n          callback(`[${APP_NAME}] reviews for restaurant id '${id}' do not exist`, null);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by id\r\n   * @param {String} id - id of restaurant\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const restaurant = restaurants.find(restaurant => restaurant.id == id);\r\n        if (restaurant)\r\n          callback(null, restaurant);\r\n        else\r\n          callback(`[${APP_NAME}] restaurant '${restaurant}' does not exist`, null);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants and filter by a cuisine type\r\n   * @param {String} cuisine - type of cuisine to search for\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else\r\n        callback(null, restaurants.filter(restaurant => restaurant.cuisine_type === cuisine));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants and filter by a neighborhood\r\n   * @param {String} neighborhood - type of neighborhood to search for\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else\r\n        callback(null, restaurants.filter(restaurant => restaurant.neighborhood === neighborhood));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood\r\n   * @param {String} cuisine - type of cuisine to search for\r\n   * @param {String} neighborhood - type of neighborhood to search for\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        let results = restaurants;\r\n        if (cuisine !== 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(restaurant => restaurant.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood !== 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(restaurant => restaurant.neighborhood === neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines\r\n   * @param {Function} callback - callback function\r\n   */\r\n  static fetchCuisines(callback) {\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error)\r\n        callback(error, null);\r\n      else {\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build restaurant page URL\r\n   * @param {Object} restaurant - restaurant object to be used to fill url\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Build restaurant image URL\r\n   * @param {Object} restaurant - restaurant object to be used to fill url\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph ?\r\n      `img/${restaurant.photograph}.webp` :\r\n      'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant\r\n   * @param {Object} restaurant - restaurant object to be used to fill url\r\n   * @param {Object} map - Google map object\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    return new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Favorite/unfavorite a restaurant\r\n   * @param {String} id restaurant id\r\n   * @param {Boolean} state true/false - favorite/unfavorite\r\n   */\r\n  static favoriteRestaurant(restaurant, state) {\r\n    if (!restaurant || typeof state !== 'boolean') return;\r\n\r\n    restaurant.is_favorite = state;\r\n\r\n    fetch(`${DBHelper.REST_URL}/restaurants/${restaurant.id}/?is_favorite=${state}`, {\r\n      method: 'PUT'\r\n    }).then(resp => {\r\n      if (resp.status != 200)\r\n        console.info(`[${APP_NAME}] response was not successful. Response: ${resp}`);\r\n    }).catch(e => {\r\n      console.error(`[${APP_NAME}] put request failed. Could not ${state ? 'favorite' : 'unfavorite'} restaurant '${restaurant.id}'. Error: ${e}`);\r\n    });\r\n\r\n    // update idb record\r\n    DBHelper.getDb().then(db => {\r\n      if (!db) return;\r\n\r\n      const store = db\r\n        .transaction(DBHelper.STORE_RESTAURANTS, 'readwrite')\r\n        .objectStore(DBHelper.STORE_RESTAURANTS);\r\n\r\n      store.put(restaurant);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Covert string to boolean\r\n * @param {any} str string variable (if other then evaluate if bool)\r\n */\r\nstringToBoolean = str => {\r\n  if (typeof str === 'string') {\r\n    switch (str.toLowerCase().trim()) {\r\n      case 'true':\r\n      case 'yes':\r\n      case '1':\r\n        return true;\r\n      case 'false':\r\n      case 'no':\r\n      case '0':\r\n      case null:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  return Boolean(str);\r\n}","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});"],"sourceRoot":"/source/"}