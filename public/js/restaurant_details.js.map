{"version":3,"sources":["restaurant_details.js","dbhelper.js","idb.js","lozad.js"],"names":["restaurant","map","navigator","serviceWorker","register","scope","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","classList","add","innerHTML","address","image","className","alt","cuisine_type","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","repeat","parseInt","comments","breadcrumb","setAttribute","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","DATABASE_URL","[object Object]","fetch","then","resp","status","json","response","restaurants","catch","e","fetchRestaurants","find","r","cuisine","filter","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","Marker","position","urlForRestaurant","animation","Animation","DROP","log","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","arr","Array","slice","call","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","idb","t","define","amd","lozad","assign","n","hasOwnProperty","documentMode","rootMargin","threshold","load","nodeName","toLowerCase","getAttribute","srcset","style","backgroundImage","loaded","o","d","u","c","s","g","f","l","IntersectionObserver","a","intersectionRatio","unobserve","target","observe","Element","NodeList","querySelectorAll","triggerLoad"],"mappings":"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","file":"restaurant_details.js","sourcesContent":["let restaurant, map;\r\n\r\n/**\r\n * Register service worker for caching static assets\r\n */\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js', { scope: './' });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = callback => {\r\n  if (self.restaurant) {\r\n    // restaurant already fetched!\r\n    callback(null, self.restaurant);\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) {\r\n    // no id found in URL\r\n    error = 'No restaurant id in URL';\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${\r\n    restaurant.cuisine_type\r\n  }`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n};\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (\r\n  operatingHours = self.restaurant.operating_hours\r\n) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n};\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n};\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = review => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.classList.add('review-name');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('span');\r\n  date.classList.add('review-date');\r\n  date.innerHTML = review.date;\r\n  name.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.classList.add('rating');\r\n  rating.innerHTML = `Rating: ${'<span>&#x2605;</span>'.repeat(\r\n    parseInt(review.rating)\r\n  )}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page');\r\n  breadcrumb.appendChild(li);\r\n};\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n};\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(resp => {\r\n        if (resp.status !== 200)\r\n          console.error(\r\n            `Could not retrieve restaurants data. Status:${response.status}`\r\n          );\r\n        else return resp.json();\r\n      })\r\n      .then(restaurants => callback(null, restaurants))\r\n      .catch(e => console.error(`Request failed. Returned error: ${e}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph\r\n      ? `img/${restaurant.photograph}.webp`\r\n      : 'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n\r\n// my signature\r\nconsole.log(\r\n  `%c AV-RR %c Andris Vilde: Restaurant Reviews `,\r\n  'background: #2196F3; color: #fff; font-size: 12px; border-radius: 3px 0 0 3px; font-family: Tahoma;',\r\n  'background: #bee1fd; color: #000; font-size: 12px; border-radius: 0 3px 3px 0; font-family: Tahoma;'\r\n);","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.lozad=e()}(this,function(){\"use strict\";function t(t){t.setAttribute(\"data-loaded\",!0)}var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r=document.documentMode,n={rootMargin:\"0px\",threshold:0,load:function(t){if(\"picture\"===t.nodeName.toLowerCase()){var e=document.createElement(\"img\");r&&t.getAttribute(\"data-iesrc\")&&(e.src=t.getAttribute(\"data-iesrc\")),t.appendChild(e)}t.getAttribute(\"data-src\")&&(t.src=t.getAttribute(\"data-src\")),t.getAttribute(\"data-srcset\")&&(t.srcset=t.getAttribute(\"data-srcset\")),t.getAttribute(\"data-background-image\")&&(t.style.backgroundImage=\"url(\"+t.getAttribute(\"data-background-image\")+\")\")},loaded:function(){}},o=function(t){return\"true\"===t.getAttribute(\"data-loaded\")},a=function(e,r){return function(n,a){n.forEach(function(n){n.intersectionRatio>0&&(a.unobserve(n.target),o(n.target)||(e(n.target),t(n.target),r(n.target)))})}},i=function(t){return t instanceof Element?[t]:t instanceof NodeList?t:document.querySelectorAll(t)};return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\".lozad\",d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=e({},n,d),c=u.rootMargin,s=u.threshold,g=u.load,f=u.loaded,l=void 0;return window.IntersectionObserver&&(l=new IntersectionObserver(a(g,f),{rootMargin:c,threshold:s})),{observe:function(){for(var e=i(r),n=0;n<e.length;n++)o(e[n])||(l?l.observe(e[n]):(g(e[n]),t(e[n]),f(e[n])))},triggerLoad:function(e){o(e)||(g(e),t(e),f(e))}}}});"],"sourceRoot":"/source/"}