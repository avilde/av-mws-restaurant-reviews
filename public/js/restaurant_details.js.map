{"version":3,"sources":["restaurant_details.js","dbhelper.js","idb.js"],"names":["initMap","fetchRestaurantFromURL","error","restaurant","console","self","map","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","classList","add","innerHTML","address","image","className","alt","cuisine_type","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","repeat","parseInt","comments","breadcrumb","setAttribute","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","DATABASE_URL","[object Object]","fetch","then","resp","status","json","response","restaurants","catch","e","fetchRestaurants","find","r","cuisine","filter","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","Marker","position","urlForRestaurant","animation","Animation","DROP","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","arr","Array","slice","call","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","idb"],"mappings":"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","file":"restaurant_details.js","sourcesContent":["let restaurant, map;\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) {\r\n    // restaurant already fetched!\r\n    callback(null, self.restaurant);\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) {\r\n    // no id found in URL\r\n    error = 'No restaurant id in URL';\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.classList.add('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Restaurant ${restaurant.name} - cuisine ${restaurant.cuisine_type}`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n};\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (\r\n  operatingHours = self.restaurant.operating_hours\r\n) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n};\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n};\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.classList.add('review-name');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('span');\r\n  date.classList.add('review-date');\r\n  date.innerHTML = review.date;\r\n  name.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.classList.add('rating');\r\n  rating.innerHTML = `Rating: ${'<span>&#x2605;</span>'.repeat(parseInt(review.rating))}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page');\r\n  breadcrumb.appendChild(li);\r\n};\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n};\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(resp => {\r\n        if (resp.status !== 200)\r\n          console.error(\r\n            `Could not retrieve restaurants data. Status:${response.status}`\r\n          );\r\n        else return resp.json();\r\n      })\r\n      .then(restaurants => callback(null, restaurants))\r\n      .catch(e => console.error(`Request failed. Returned error: ${e}`));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant && restaurant.photograph\r\n      ? `img/${restaurant.photograph}.webp`\r\n      : 'img/no-image.svg';\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());"],"sourceRoot":"/source/"}